WEB_SOCKET_SWF_LOCATION = "https://socketswagger.herokuapp.com/socket.io/inc/WebSocketMain.swf";
var socket = io.connect("https://socketswagger.herokuapp.com/", { transports: ['websocket'] });
socket.emit("ready for data", {});
window.newSongPlayed = function(t) {
    try {
        socket.emit(localStorage.userID + "songChanged", {
            body: t
        })
    } catch (t) {
        console.log(t)
    }
    nextSongsCache()
}, window.hideload = function() {
    document.getElementById("load").style.visibility = "hidden"
}, window.now = function(t, e) {
    play(localStorage.device_id, "spotify:track:"+t), localStorage.nowp = t, nextSongsCache()
}, window.hashCode = function(t) {
    return t.split("").reduce(function(t, e) {
        return (t = (t << 5) - t + e.charCodeAt(0)) & t
    }, 0)
}, window.swipeLeft = function(e, t, a, o, s) {
       if (a >= $(window).width() / 10) {
                   $(".removeSong").remove()
                  }
                  }, window.swipeRight = function(e, t, a, o, s) {
      if (a >= $(window).width() / 10) {
                  if($(".removeSong").length <= 0){
                  $(this).swipe({
                                                swipeLeft: swipeLeft
                                });
           var l = this;
                  $(this).find(".info").prepend("<div class='removeSong' style='display:block;text-align:center;background:red;width:120px;height:40px;font-weight:400;color:white;padding:14px 10px;font-size:10px;margin-right:10px;'>REMOVE</div>"),
                  $(this).find(".removeSong").on("click", function() {
                                                 $(l).find(".removeSong").css("background", "black");
                                                 removeOne($(l).attr("title"))
                                                 })
                  /*setTimeout(function() {
                                               $(".removeSong").remove()
                                               }, 3500)*/
                  } else {
                  $(".removeSong").remove();
                  $(this).swipe({
                                swipeLeft: swipeLeft
                                });
                  var l = this;
                  $(this).find(".info").prepend("<div class='removeSong' style='display:block;text-align:center;background:red;width:120px;height:40px;font-weight:400;color:white;padding:14px 10px;font-size:10px;margin-right:10px;'>REMOVE</div>"),
                  $(this).find(".removeSong").on("click", function() {
                                                 $(l).find(".removeSong").css("background", "black");
                                                 removeOne($(l).attr("title"));
                                                 $(l).remove();
                                                 })
                  /*setTimeout(function() {
                             $(".removeSong").remove()
                             }, 3500)*/
                  }
       }
   }, window.nextSongsCache = function() {
    localStorage.searchFlag = !1;
    var t = [],
        e = JSON.parse(localStorage.songList);
    $("#results").css("padding-top", "298px !important"), $("#results").css("text-align", "center"), $("#results").empty(), localStorage.nowp || null == e.items[0].track.id || "null" == e.items[0].track.id ? localStorage.nowp || null != e.items[0].track.id && "null" != e.items[0].track.id || (localStorage.nowp = hashCode(e.items[0].track.name + e.items[0].track.artists[0].name)) : localStorage.nowp = e.items[0].track.id;
    for (var a = 0; a < e.items.length; a++) {
        if (e.items[a].track.id == localStorage.nowp || localStorage.nowp == hashCode(e.items[a].track.name + e.items[a].track.artists[0].name)) try {
            $("#song").text(e.items[a].track.name), $("#song").attr("title", e.items[a].track.id), $("#song").attr("data", e.items[a].track.id.substring(1, 5)), $("#artist").text(e.items[a].track.artists[0].name), $(".img").eq(a).css("background", "url(" + e.items[a].track.album.images[0].url + ") center center"), $(".img").eq(a).css("background-size", "cover"), $("#albumImage").css("background", "linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.4)), url(" + e.items[a].track.album.images[0].url + ") center top")
        } catch (err) {}
        e.items[a].track.id != localStorage.nowp && null != e.items[a].track.id && "null" != e.items[a].track.id ? ($("#results").append('<div title="' + e.items[a].track.id + '" data="' + e.items[a].track.id.substring(1, 5) + '" class="songLinkClick next played song-' + a + '" id="songLinkClick' + a + '"> <div class="info"> <div class="img first"></div> <div class="titles"> <h5 onclick="now(\'' + e.items[a].track.id + "', " + a + ')" class="block">' + e.items[a].track.name + '</h5> <p class="block"><span class="artistName">' + e.items[a].track.artists[0].name + '</span> <span class="albumName">&#183; ' + e.items[a].track.album.name + '</span></p> </div> <div class="buttons"><div class="voteBtn voteDown"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></div><div data="' + a + '" class="voteUp voteBtn" name="0"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></div><sup></sup></div></div></div>'), null != e.items[a].track.id && "null" != e.items[a].track.id ? t.push(e.items[a].track.id.substring(1, 5)) : null !== e.items[a].track.id && "null" != e.items[a].track.id || t.push(hashCode(e.items[a].track.name + e.items[a].track.artists[0].name).substring(1, 5))) : $("#results").append('<div title="' + hashCode(e.items[a].track.name + e.items[a].track.artists[0].name + '" data="' + e.items[a].track.id.substring(1, 5) + '" class="songLinkClick next played song-' + a + '" id="songLinkClick' + a + '"> <div class="info"> <div class="img first"></div> <div class="titles"> <h5 class="block">' + e.items[a].track.name + '</h5> <p class="block"><span class="artistName">' + e.items[a].track.artists[0].name + '</span> <span class="albumName">&#183; ' + e.items[a].track.album.name + '</span></p> </div><div class="buttons"><div class="voteBtn voteDown"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></div><div data="' + a + '" class="voteUp voteBtn" name="0"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></div><sup></sup></div></div></div>'), null != e.items[a].track.id && "null" != e.items[a].track.id ? t.push(e.items[a].track.id.substring(1, 5)) : null !== e.items[a].track.id && "null" != e.items[a].track.id || t.push(hashCode(e.items[a].track.name + e.items[a].track.artists[0].name).substring(1, 5)));
    }
       addVotes(),
    addSwipe(),
    localStorage.CT = t,
        down(), song()
};
var t, a, n, o, e = [];
window.isReady = function() {
    return !0
}, window.rVote = function() {
    parseInt($(".songLinkClick").eq(1).children(".voteUp").text()) < 0 && resetVotes()
}, window.nextSong = function(t) {
    location.href = "partymusic://" + $(".songLinkClick").eq(1).attr("title")
}, localStorage.party && (localStorage.lastFM = localStorage.party), localStorage.votedArray || (localStorage.votedArray = " "), localStorage.CT1, $("#results").empty, localStorage.totalSongs = 0, localStorage.currentlyPlayingWC = "", localStorage.currentlyPlaying = "", localStorage.currentTrack = 0, localStorage.offsetNumber = 0, $("#nameify").empty(), $("#nameify").append(localStorage.party.split(":::")[0].toUpperCase()), window.loading = function() {
    $("#load").show(), setTimeout(function() {
                                  $("#load").fadeOut(1500)
                                  },2000)
}, window.votedImg = function() {
    $("#vote").show(), $("#vote").fadeOut(1250)
};
loading();
var r, s = 1;
i = [], window.nextSongs = function() {
    $.ajax({
        async: !0,
        type: "GET",
        cache: !0,
        url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks?limit=100",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: "formdata",
        success: function(t) {
            localStorage.songList = JSON.stringify(t), nextSongsCache(),  checkToken()
        }
           })
}, window.addSwipe = function() {
$.each($(".songLinkClick"), function(){
$(this).swipe({
swipeRight: swipeRight
});
});
},
window.addVotes = function(e) {
    $.each($(".songLinkClick"), function(k,v){
           $(v).find(".voteUp").on("tap", function(event) {
                                   var t = "++" + $(v).attr("data");
                                   var d = $(v).attr("data");
                a = parseInt($(v).find(".voteUp").text());
                                                      vote(t, a, d);
                                                      event.preventDefault()
           }),
           $(v).find(".voteDown").on("tap", function(event) {
               var t = "--" + $(v).attr("data");
                                     var d = $(v).attr("data");
                                                        vote(t, 0, d);
                                                        event.preventDefault()
                                        });
           });
       }, localStorage.votes || (localStorage.votes = ""), window.calculateVotes = function() {
    console.log("CV1");
    var t, e;
    l = localStorage.CT.split(","), $.each(l, function(a, o) {
        t = localStorage.votes.split("++" + o).length, e = localStorage.votes.split("--" + o).length, t - e != 0 ? ($("[data=" + o + "]").find("sup").text(t - e), $("[data=" + o + "]").find(".voteUp").attr("name", t - e), $("[data=" + o + "]").find(".voteUp").css("fontWeight", "bold")) : ($("[data=" + o + "]").find("sup").text(""),$("[data=" + o + "]").find(".voteUp").html("<i class='fa fa-thumbs-o-up' aria-hidden='true'></i>"), $("[data=" + o + "]").find(".voteUp").attr("name", t - e))
    }), $("#results .next").sort(sortSongs).appendTo("#results");
    return t + e
       },   window.sortSongs = function(a, b) {
           if(parseInt($(b).find(".voteUp").attr("name")) > 0 || parseInt($(a).find(".voteUp").attr("name")) > 0) {
               return parseInt($(b).find(".voteUp").attr("name")) - parseInt($(a).find(".voteUp").attr("name")) || parseInt($(b).attr("id").substring(13, $(b).attr("id").length)) - parseInt($(a).attr("id").substring(13, $(a).attr("id").length))
           } else {
               return parseInt($(b).find(".voteUp").attr("name")) - parseInt($(a).find(".voteUp").attr("name"))
           }
       }, localStorage.votes, window.vote = function(t, e, d) {
    1 == e && (t = "++" + t), 0 == e && (t = "--" + t), localStorage.firstHide = 1;
var voteTally;
var current = $("[data=" + d + "]").find("sup").text();
if (current.length<1) voteTally = 0;
if (parseInt(current) == -1 && voteTally != 0) {
  voteTally = "";
}
else {
  voteTally = current + 1;
}
$("[data=" + d + "]").find("sup").text(voteTally);
                          localStorage.setItem("votes", localStorage.votes.toString() + t)
                         calculateVotes();
    var a = {};
       socket = io.connect('https://socketswagger.herokuapp.com/');
       socket.emit('newVote', { username: localStorage.userID }); a.votes = t, a.username = localStorage.userID, $.ajax({
        async: !1,
        url: "https://paywallios.herokuapp.com/upVote",
        dataType: "json",
        data: a,
        success: function(t) {},
        error: function(t) {}
    })
}, window.updateVotes = function(t) {
    var e = {};
    e.username = localStorage.userID, e.votes = t.replace(/\\/g, ""), localStorage.votes = e.votes, calculateVotes(), $.ajax({
        timeout: 2500,
        async: !0,
        cache: !0,
        url: "https://paywallios.herokuapp.com/downVote",
        dataType: "json",
        data: e,
        success: function(t) {}
    })
}, window.remove = function(t) {
    if (parseInt($(".songLinkClick").eq(0).find(".voteUp").attr("name")) < 0 && resetVotes(), parseInt($(".songLinkClick").last().find(".voteUp").attr("name")) < t) {
        var e, a, o = -3;
        t && (o = t);
        var s = [],
            l = localStorage.CT.split(",");
        $.each(l, function(t, l) {
            e = localStorage.votes.split("++" + l).length, a = localStorage.votes.split("--" + l).length, $("[data=" + l + "]").attr("title"), e - a <= o && s.push('{ "uri": "spotify:track:' + $("[data=" + l + "]").attr("title") + '" }')
        });
        var i = '{"tracks":[' + s + "]}";
        1 <= s.length && (location.href = "partymusic://newSongAdded", $.ajax({
            async: !0,
            cache: !0,
            type: "DELETE",
            url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks",
            headers: {
                Authorization: "Bearer " + localStorage.current_token
            },
            contentType: "application/json",
            data: i,
            success: function(t) {
                nextSongs(), socket.emit("newSongAdded", {
                    username: localStorage.userID
                }), setTimeout(function() {
                    location.href = localStorage.urlParts + "/index.html"
                }, 750)
            },
            error: function(t) {}
        }))
    }
}, window.updateNowSong = function() {
    location.href = "partymusic://updateNow/spotify:track:" + $("#song").attr("title")
}, window.updateLSSong = function() {
    location.href = "partymusic://updateSong/spotify:track:" + $(".songLinkClick").eq(0).attr("title")
}, window.removeOne = function(t) {
    var e = '{"tracks":[{ "uri": "spotify:track:' + t + '" }]}';
    location.href = "partymusic://newSongAdded", $.ajax({
        async: !0,
        cache: !0,
        type: "DELETE",
        url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        contentType: "application/json",
        data: e,
        success: function(t) {
            $(".songLinkClick .removeSong").remove();
             nextSongs();
                   socket = io.connect("https://socketswagger.herokuapp.com/", { transports: ['websocket'] });
                         setTimeout(function() {
                                 socket.emit("newSongAdded", {
                                                           username: localStorage.userID
                                                       });
                                                       }, 10);
        },
        error: function(t) {}
    });
}, setTimeout(remove, 3e3), window.voteCookie = function() {
    vote(", ")
}, setTimeout(voteCookie, 5e3), window.down = function(t) {
    var e = $("#song").attr("data"),
        a = new RegExp(e, "g"),
        o = new RegExp("", "g"),
        s = localStorage.votes.replace(a, "");
    s = (s = (s += ", --" + e).replace(o, "")).replace(/\\/, ""), localStorage.votes = s, updateVotes(s)
}, window.increment = function(t) {
    (localStorage.firstHide = 1) === t && null != $(".songLinkClick").eq(0).attr("title") && now($(".songLinkClick").eq(0).attr("title")), localStorage.nowp = $(".songLinkClick").eq(0).attr("title"), setTimeout(function() {
        socket.emit(localStorage.userID + "songChanged", {
            body: localStorage.nowp
        })
    }, 1e3), setTimeout(nS, 500), setTimeout(rVote, 2500), setTimeout(moveToBottom, 3000), 2 === t && null != $(".songLinkClick").eq(0).attr("title") && (localStorage.nowp = $(".songLinkClick").eq(0).attr("title"), setTimeout(function() {
        socket.emit(localStorage.userID + "songChanged", {
            body: localStorage.nowp
        })
    }, 1e3), setTimeout(nS, 500), setTimeout(rVote, 2500), setTimeout(moveToBottom, 3000))
}, window.reload = function() {
    location.href = "partymusic://reload"
}, window.playFirst = function() {
    $("#song").attr("title") ? location.href = "partymusic://prettyprev/" + $("#song").attr("title") : increment(1), localStorage.firstLoad = 1
}, setTimeout(playFirst, 2000), window.next = function() {
    $(".songLinkClick").eq(0).attr("title") && (localStorage.nextUp = $(".songLinkClick").eq(0).attr("title") + ":::" + $(".songLinkClick").eq(0).attr("id").substr(13))
}, window.prev = function () {
    $.ajax({
        url: 'https://api.spotify.com/v1/me/player/previous',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + localStorage.current_token
        },
    });
}, window.pause = function() {
    location.href = "partymusic://pause"
}, window.nS = function() {
    localStorage.songList ? nextSongsCache() : nextSongs()
}, setTimeout(nS, 1e3), window.downVoteify = function(t) {
    setTimeout(nS, 1e3), setTimeout(function() {
        down()
    }, 500), setTimeout(function() {
        down()
    }, 7e3)
}, window.loader = function() {
    downVoteify(), location.href = "partymusic://updatePass"
}, window.song = function() {
    var t = {};
    t.username = localStorage.userID, t.song = $("#song").attr("title"), $.ajax({
        async: !0,
        cache: !0,
        url: "https://paywallios.herokuapp.com/song",
        dataType: "json",
        data: t,
        timeout: 12e3,
        success: function(t) {}
    })
};
var hashCodeNum = function(t) {
    var e, a = 0;
    if (0 === t.length) return a;
    for (e = 0; e < t.length; e++) a = (a << 5) - a + t.charCodeAt(e), a |= 0;
    return a
};
localStorage.hashNum || (localStorage.hashNum = hashCodeNum((new Date).getTime().toString())), setTimeout(song, 7e3), window.reload = function() {
    location.href = "partymusic://reloader"
}, setTimeout(function() {
    $("#song").text.length < 1 && increment(1)
}, 9e3), setTimeout(function() {
    $("#song").text.length < 1 && increment(1)
}, 12e3), window.findParty = function(t) {
    var e = {};
    e.party = localStorage.party.split(":::")[0], $.ajax({
        url: "https://paywallios.herokuapp.com/find",
        data: e,
        cache: !0,
        async: !0,
        timeout: 1e4,
        dataType: "json",
        success: function(e) {
            localStorage.votes != e.votes || 1 == t ? (localStorage.votes = e.votes, nextSongs()) : nextSongsCache()
        },
        error: function(t, e, a) {}
    })
},window.findParty2 = function (a) {
    var object = {};
    object.party = a;
    $.ajax({
           url: "https://paywallios.herokuapp.com/find",
           data: object,
           dataType: "json",
           success: function (d) {
           var plist = d.playlist;
           localStorage["complete_access"] = true;
           localStorage["password"] = d.superpowers;
           localStorage["explicit"] = d.explicit;
           localStorage["Snapster"] = plist.split(":::")[0];
           localStorage["Snapster2"] = plist.split(":::")[1];
           localStorage["party"] = d.party;
           localStorage["url"] = d.access_token;
           localStorage["userID"] = d.username.split(":::")[0];
           localStorage["username"] = d.username;
           localStorage["refresh_token"] = d.refresh_token;
           //location.href = "partymusic://first/";
           var urlP = window.location.toString().split("/public/")[0] + "/public";
           setInterval(function () { location.href = urlP + "/index.html"; }, 500);
           }, error: function (e, ee, eee) {
           //findParty(a);
           //console.log(JSON.stringify(e));
           //console.log(JSON.stringify(ee));
           //console.log(JSON.stringify(eee));
           }
           });
}, localStorage.setItem("host", !0), localStorage.setItem("allowed", !0), localStorage.removeItem("Snapster2");
var flag = !1;
window.start = function() {
    localStorage.userID || $.ajax({
        async: !0,
        type: "GET",
        url: "https://api.spotify.com/v1/me",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: "formdata",
        success: function(t) {
            localStorage.userID = t.id, userID = localStorage.userID, localStorage.valid = "true"
        },
        error: function() {}
    })
}, start();
var access_token = localStorage.current_token,
    playlists = [],
    date = (new Date).toLocaleDateString(),
    mostVoted = "Most Voted " + date.split("/")[0] + "/" + date.split("/")[2];
window.loadLists = function() {
    /*setTimeout(function() {
        if (localStorage.spotifyPlaylists) {
            var t = JSON.parse(localStorage.spotifyPlaylists);
            t = t.playlists, arr = [], $("#playlistsListed").append("<header style='color: white !important; pointer-events: all; margin-bottom: 50px; margin-top: -50px;' class='songLinkClick1 items'><div><center class='items' style='font-size: 200%; padding-bottom: 50px; padding-top: -50px; '>Spotify Playlists</center></div></header><h1></h1><h1></h1>"), localStorage.Snapster && $("#playlistsListed").append("<div name='currentPlaylist' onclick='stay();' class='playlists items inline pSnap'><div class='charlie'><div class='row'><div><div><div><div><img class='images' src='dirtyScripts/turtle.png'/></div></div><div class='playlist-desc'><h3</h3><h3></h3><h5>Current Playlist</h5><p>...</p></div></div></div>");
            for (var e = 0; e < t.items.length; e++) $("#playlistsListed").append("<div name='" + t.items[e].id.toString() + "' onclick='viewPlaylist(\"" + t.items[e].id.toString() + "\", \"spotify\");' class='playlists items inline p'><div class='charlie'><div class='row'><div><div><div><div><img class='images' src=\"" + t.items[e].images[0].url.toString() + "\"/></div></div><div class='playlist-desc'><h3</h3><h3></h3><h5>" + t.items[e].name + "</h5><p>" + t.items[e].tracks.total + " Total Songs</p></div></div></div>")
        } else $.ajax({
            async: !0,
            type: "GET",
            url: "https://api.spotify.com/v1/search?q=party&type=playlist&limit=20",
            headers: {
                Authorization: "Bearer " + localStorage.current_token
            },
            dataType: "json",
            data: "formdata",
            success: function(t) {
                localStorage.spotifyPlaylists = JSON.stringify(t), t = t.playlists, arr = [], $("#playlistsListed").append("<header style='color: white !important; pointer-events: all; margin-bottom: 50px; margin-top: -50px;' class='songLinkClick1 items'><div><center class='items' style='font-size: 200%; padding-bottom: 50px; padding-top: -50px; '>Spotify Playlists</center></div></header><h1></h1><h1></h1>"), localStorage.Snapster && $("#playlistsListed").append("<div name='currentPlaylist' onclick='stay();' class='playlists items inline pSnap'><div class='charlie'><div class='row'><div><div><div><div><img class='images' src='dirtyScripts/turtle.png'/></div></div><div class='playlist-desc'><h3</h3><h3></h3><h5>Current Playlist</h5><p>...</p></div></div></div>");
                for (var e = 0; e < t.items.length; e++) $("#playlistsListed").append("<div name='" + t.items[e].id.toString() + "' onclick='viewPlaylist(\"" + t.items[e].id.toString() + "\", \"spotify\");' class='playlists items inline p'><div class='charlie'><div class='row'><div><div><div><div><img class='images' src=\"" + t.items[e].images[0].url.toString() + "\"/></div></div><div class='playlist-desc'><h3</h3><h3></h3><h5>" + t.items[e].name + "</h5><p>" + t.items[e].tracks.total + " Total Songs</p></div></div></div>");
                $(".items").wrapAll("<div id='playlistContainer'></div>")
            }
        })
    }, 1700),*/
    setTimeout(function() {
      if (localStorage.userID)
        if (localStorage.myPlaylists) {
        $("#playlistsListed").empty();
          var e = JSON.parse(localStorage.myPlaylists);
          $("#playlistsListed").append("<header style='color: white !important; pointer-events: all; margin-bottom: 50px; margin-top: 50px;' class='songLinkClick1 items playlist'><div><center class='items' style='font-size: 200%; padding-top: 50px; padding-bottom: 50px;'>Your Playlists</center></div></header>");
            for (var a = 0; a < e.items.length; a++)
            if(e.items[a].tracks.total >= 5) $("#playlistsListed").append('<div title="'+e.items[a].id+'" class="songLinkClick1 next played items song-'+a+'" id="songLinkClick'+a+'"><div class="info"><div class="imgfirst"></div><div class="titles"><h5 onclick="viewPlaylist(\''+e.items[a].id.toString()+'\',\'null\');" class="block">'+e.items[a].name+'</h5><p class="block"><span class="artistName">'+e.items[a].tracks.total+' TotalSongs</span><span class="albumName"></span></p></div><div class="buttons"><div class="voteBtn voteDown"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></div><div class="voteUp voteBtn" data="'+a+'" name="0"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></div><sup></sup></div></div></div>')
          $(".items").wrapAll("<div id='playlistContainer'></div>");
        } else $.ajax({
          async: !0,
          type: "GET",
          url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists?limit=50",
          headers: {
            Authorization: "Bearer " + localStorage.current_token
          },
          dataType: "json",
          data: "formdata",
          success: function(e) {
         $("#playlistsListed").append("<header style='color: white !important; pointer-events: all; margin-bottom: 50px; margin-top: 50px;' class='songLinkClick1 items playlist'><div><center class='items' style='font-size: 200%; padding-top: 50px; padding-bottom: 50px;'>Your Playlists</center></div></header>");
            for (var a = 0; a < e.items.length; a++)
            if(e.items[a].tracks.total >= 5) $("#playlistsListed").append('<div title="'+e.items[a].id+'" class="songLinkClick1 next played items song-'+a+'" id="songLinkClick'+a+'"><div class="info"><div class="imgfirst"></div><div class="titles"><h5 onclick="viewPlaylist(\''+e.items[a].id.toString()+'\',\'null\');" class="block">'+e.items[a].name+'</h5><p class="block"><span class="artistName">'+e.items[a].tracks.total+' TotalSongs</span><span class="albumName"></span></p></div><div class="buttons"><div class="voteBtn voteDown"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></div><div class="voteUp voteBtn" data="'+a+'" name="0"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></div><sup></sup></div></div></div>')
                  $(".items").wrapAll("<div id='playlistContainer'></div>");
          }
        });
    }, 1000);
  }, window.removeHTML = function() {
    document.hasFocus()
};
var removeObj = {},
    removeArr = [];
window.removeFromPlaylist = function(t) {
    $.ajax({
        async: !0,
        type: "DELETE",
        url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "application/json",
        data: JSON.stringify(removeObj),
        success: function(t) {}
    })
}, window.clone = function(t, e) {
    loading();
    if (createBackup(), localStorage.Snapster) {
        var a = [];
        $.ajax({
            async: !0,
            type: "GET",
            url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks",
            headers: {
                Authorization: "Bearer " + localStorage.current_token
            },
            dataType: "json",
            data: "formdata",
            success: function(t) {
                for (var e = {}, o = 0; o < Math.min(100, t.items.length); o++) e = {
                    uri: t.items[o].track.uri.toString()
                }, a.push(e);
                removeObj.tracks = a, removeFromPlaylist(a.toString())
            }
        })
    }
    "null" == e && (e = localStorage.userID), setTimeout(function() {
        $.ajax({
            async: !0,
            type: "GET",
            url: "https://api.spotify.com/v1/users/" + e + "/playlists/" + t + "/tracks",
            headers: {
                Authorization: "Bearer " + localStorage.current_token
            },
            dataType: "json",
            data: "formdata",
            success: function(t) {
                arr = [];
                var e = 0;
                if ("false" != localStorage.explicit.toString())
                    for (var a = 0; a < Math.min(t.items.length, 100); a++) arr.push(t.items[a].track.uri.toString());
                else
                    for (a = 0; a < Math.min(t.items.length, 100) && (0 == t.items[a].track.explicit && (arr.push(t.items[a].track.uri.toString()), e++), 100 != e); a++);
                localStorage.Snapster || newSpotifyPlaylist(), 100 <= arr.toString().length ? (loading(), setTimeout(function() {
                    addToPlaylist(arr.toString())
                }, 1)) : location.href = "partymusic://playlisterror"
            }
        })
    }, 1e3), loading()
}, window.newSpotifyPlaylist = function() {
    !localStorage.Snapster2 && localStorage.Snapster2 && createBackup();
    $.ajax({
        async: !0,
        type: "POST",
        url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists",
        headers: {
            Authorization: "Bearer " + access_token
        },
        dataType: "json",
        data: JSON.stringify({
            name: "Swagger Music",
            public: "true"
        }),
        success: function(t) {
            localStorage.Snapster = t.id.toString()
        }
    })
}, window.addToPlaylist = function(t) {
    var e = {};
    e.uris = t.split(","), $.ajax({
        async: !0,
        type: "POST",
        url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks",
        headers: {
            Authorization: "Bearer " + access_token
        },
        dataType: "json",
        data: JSON.stringify(e),
        success: function(t) {
            localStorage.wasPressed = 0, localStorage.firstLoad = 0, localStorage.removeItem("songList"), setTimeout(function() {
                location.href = localStorage.urlParts + "/index.html"
            }, 1)
        }
    })
}, window.createBackup = function() {
    if (!localStorage.Snapster2 && localStorage.Snapster2) {
        var t = {};
        t.name = mostVoted, t.public = "true", $.ajax({
            async: !0,
            type: "POST",
            url: "https://api.spotify.com/v1/users/" + localStorage.userID + "/playlists",
            headers: {
                Authorization: "Bearer " + access_token
            },
            dataType: "json",
            data: JSON.stringify(t),
            success: function(t) {
                localStorage.Snapster2 = t.id.toString()
            }
        })
    }
}, window.newPlaylist = function(t) {
    localStorage.Snapster2 || createBackup(), localStorage.removeItem("songList"), localStorage.removeItem("nowp"), localStorage.Snapster = t, localStorage.wasPressed = 0, localStorage.firstLoad = 0, setTimeout(function() {
        create()
    }, 1e3), setTimeout(function() {}, 2e3)
}, window.removeHTML = function() {
    document.hasFocus() && null != localStorage.current_token && "null" != localStorage.current_token && null != localStorage.current_token && (localStorage.partyid || localStorage.party)
}, window.playLoader = function() {
    for (var t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
        $("#load").show()
    })
}, window.playHover = function() {
    for (var t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
        $(this).css("width", "27%"), $("#playlistContainer").css("padding-left", "5%")
    }), $(".playlists").eq(t).mouseleave(function() {
        $(this).css("width", ""), $("#playlistContainer").css("padding-left", "")
    }), $("#load").show();
    if ($(window).resize(function() {
            if ($(window).width() < 900 && 200 < $(window).width()) {
                for (var t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("half"), $(".playlists").eq(t).removeClass("inline"), $(".playlists").eq(t).removeClass("fourth");
                for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
                    $(this).css("width", "50%"), $("#playlistContainer").css("padding-left", "5%")
                }), $(".playlists").eq(t).mouseleave(function() {
                    $(this).css("width", ""), $("#playlistContainer").css("padding-left", "")
                })
            } else if (900 < $(window).width()) {
                for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("inline"), $(".playlists").eq(t).removeClass("half"), $(".playlists").eq(t).removeClass("fourth");
                for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
                    $(this).css("width", "27%"), $("#playlistContainer").css("padding-left", "5%")
                }), $(".playlists").eq(t).mouseleave(function() {
                    $(this).css("width", ""), $("#playlistContainer").css("padding-left", "")
                })
            } else if ($(window).width() < 200) {
                for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("fourth"), $(".playlists").eq(t).removeClass("inline"), $(".playlists").eq(t).removeClass("half");
                for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
                    $(this).css("width", "90%"), $("#playlistContainer").css("padding-left", "5%")
                }), $(".playlists").eq(t).mouseleave(function() {
                    $(this).css("width", ""), $("#playlistContainer").css("padding-left", "5%")
                })
            }
        }), window.stay = function() {
            location.href = localStorage.urlParts + "/index.html"
        }, $(window).width() < 900 && 200 < $(window).width()) {
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("half"), $(".playlists").eq(t).removeClass("inline"), $(".playlists").eq(t).removeClass("fourth");
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
            $(this).css("width", "50%"), $("#playlistContainer").css("padding-left", "5%")
        }), $(".playlists").eq(t).mouseleave(function() {
            $(this).css("width", ""), $("#playlistContainer").css("padding-left", "")
        })
    } else if (900 < $(window).width()) {
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("inline"), $(".playlists").eq(t).removeClass("half"), $(".playlists").eq(t).removeClass("fourth");
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
            $(this).css("width", "27%"), $("#playlistContainer").css("padding-left", "5%")
        }), $(".playlists").eq(t).mouseleave(function() {
            $(this).css("width", ""), $("#playlistContainer").css("padding-left", "")
        })
    } else if ($(window).width() < 200) {
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).addClass("fourth"), $(".playlists").eq(t).removeClass("inline"), $(".playlists").eq(t).removeClass("half");
        for (t = 0; t < $("#playlistContainer").children(".playlists").length; t++) $(".playlists").eq(t).mouseenter(function() {
            $(this).css("width", "90%"), $("#playlistContainer").css("padding-left", "5%")
        }), $(".playlists").eq(t).mouseleave(function() {
            $(this).css("width", ""), $("#playlistContainer").css("padding-left", "5%")
        })
    }
}, $("#playlistsListed").children.length < 10 && setTimeout(loadLists, 500), setTimeout(playLoader, 5e3), localStorage.combo = localStorage.userID + ":::" + localStorage.password, WEB_SOCKET_SWF_LOCATION = "https://socketswagger.herokuapp.com/socket.io/inc/WebSocketMain.swf", hashCodeNum = function(t) {
    var e, a = 0;
    if (0 === t.length) return a;
    for (e = 0; e < t.length; e++) a = (a << 5) - a + t.charCodeAt(e), a |= 0;
    return a
};
window.findVotes1 = function () {
                                    var object = {};
                                    object.party = localStorage.party.split(":::")[0];
                                    $.ajax({
                                    url: "https://paywallios.herokuapp.com/find",
                                    data: object,
                                    timeout:10000,
                                    dataType: "json",
                                    success: function (d) {
                                    localStorage["refresh_token"] = d.refresh_token;
                                   // localStorage["current_token"] = d.access_token;
                                    console.log(d.access_token);
                                    if (localStorage.votes != d.votes) {
                                           localStorage["votes"] = d.votes;
                                           calculateVotes();
                                    }
                                    }, error: function (e, ee, eee) {
                                    }
                                    });
                                    };
var userID, baseURL, searchQry, myDataLength, partyPlaylist, tick = 0;
localStorage.hashNum || (localStorage.hashNum = hashCodeNum((new Date).getTime().toString())), window.recon = function() {
    var t = {};
    t.combo = localStorage.combo, t.username = localStorage.userID, t.hash = localStorage.hashNum, $.ajax({
            url: "https://socketswagger.herokuapp.com/start",
            dataType: "json",
            data: t,
            success: function(t) {
                console.log("SUCCESS " + t)
            },
            error: function(t) {
                console.log("Error " + JSON.stringify(t))
            }
        }), socket.on(localStorage.userID + "updateios", function(t) {
            if (10 < t.body.length && localStorage.votes != t.body) {
                localStorage.votes = t.body;
                setTimeout(calculateVotes, 1500);
                console.log("VOTES " + t.body);
            }
        }), socket.on(localStorage.userID + "newSong", function(t) {
            setTimeout(nextSongs, 3e3)
        })
}, socket.on("disconnect", function(t) {}), setTimeout(recon, 3e3), window.resetVotes = function() {
    localStorage.votes = "", localStorage.setItem("STOP", "true");
    var t = {};
    t.username = localStorage.userID, $.ajax({
        url: "https://paywallios.herokuapp.com/clearVotes",
        dataType: "json",
        data: t,
        success: function(t) {
            localStorage.votes = "", calculateVotes()
        },
        error: function(t) {
            localStorage.votes = "", calculateVotes()
        }
    })
};
var listOfTracks = [];
if ($("#fname").on("blur", function() {}), $("#search").on("click", function() {
        $("#fname").show(), $("#fname").focus()
    }), $("#fname").on("keypress", function() {
        if ($("#html").scroll(function(t) {
                t.preventDefault(), t.stopPropogagtion()
            }), 13 === event.which)
            if (localStorage.searchFlag = !0, $("#fname").blur(), "logout." == document.getElementById("fname").value.toLowerCase() && "false" != localStorage.complete_access && 0 != localStorage.complete_access) localStorage.clear(), location.href = "https://www.spotify.com/us/logout";
            else if ("fullscreen." == document.getElementById("fname").value.toLowerCase() || "fs." == document.getElementById("fname").value.toLowerCase()) document.getElementById("html"), document.fullScreenElement && null !== document.fullScreenElement || !document.mozFullScreen && !document.webkitIsFullScreen ? document.documentElement.requestFullScreen ? document.documentElement.requestFullScreen() : document.documentElement.mozRequestFullScreen ? document.documentElement.mozRequestFullScreen() : document.documentElement.webkitRequestFullScreen && document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT) : document.cancelFullScreen ? document.cancelFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen(), document.getElementById("fname").value = "", nextSongs();
        else if ("c." == document.getElementById("fname").value.toLowerCase()) localStorage.votedArray = "", window.location.reload();
        else if ("clear votes." == document.getElementById("fname").value.toLowerCase()) resetVotes();
        else if ("temp." == document.getElementById("fname").value.toLowerCase()) localStorage.setItem("temp", !0);
        else if ("cp." == document.getElementById("fname").value.toLowerCase() || "change playlist." == document.getElementById("fname").value.toLowerCase()) location.href = "playlists.html";
        else if ("admin." == document.getElementById("fname").value.toLowerCase() || "change party name." == document.getElementById("fname").value.toLowerCase()) location.href = "welcome.html";
        else if ("i really want unlimited voting." == document.getElementById("fname").value.toLowerCase() || "uv." == document.getElementById("fname").value.toLowerCase()) resetVotes(1), localStorage.setItem("uv", "true");
        else if ("reload." == document.getElementById("fname").value.toLowerCase()) loading(), reload();
        else if ("leave party." == document.getElementById("fname").value.toLowerCase()) loading(), window.localStorage.clear("CT"), window.localStorage.clear("Snapster"), window.localStorage.clear("clicked"), window.localStorage.clear("currentTrack"), window.localStorage.clear("current_token"), window.localStorage.clear("complete_access"), window.localStorage.clear("currentlyPlaying"), window.localStorage.clear("currentlyPlayingID"), window.localStorage.clear("currentlyPlayingWC"), window.localStorage.clear("explicit"), window.localStorage.clear("host"), window.localStorage.clear("myData"), window.localStorage.clear("lastFM"), window.localStorage.clear("partyid"), window.localStorage.clear("offsetNumber"), window.localStorage.clear("totalSongs"), window.localStorage.clear("url"), window.localStorage.clear("userID"), window.location.href = "/thank-you-host.html";
        else if (document.getElementById("fname").value.toLowerCase() == localStorage.password.toString().toLowerCase() + ".") localStorage.power_voter = "yes", location.reload();
        else if ("" == document.getElementById("fname").value) nextSongs(), $("#searchResults").empty();
        else if (localStorage.Snapster) try {
            $("#searchResults").css("display", "block"), partyPlaylist = [], baseURL = "https://api.spotify.com/v1/users/", userID = localStorage.userID, searchQry = document.getElementById("fname").value.toLowerCase(),
                $.ajax({ async: !0, type: "GET", url: "https://api.spotify.com/v1/search?q=" + searchQry + "&type=track,artist&market=from_token&include_external=audio&limit=50&offset=0", headers: { Authorization: "Bearer " + localStorage.current_token }, dataType: "json", data: "formdata", success: function(s) { console.log(JSON.stringify(s)); $("#searchResults").empty(); for (var t = 0; t < s.tracks.items.length; t++) "true" != localStorage.explicit && 1 != localStorage.explicit ? (0 == s.tracks.items[t].explicit || "false" == s.tracks.items[t].explicit && -1 == localStorage.CT.indexOf(s.tracks.items[t].id.substring(1, 5))) && $("#searchResults").append('<div onclick="newSong( ' + t + ' )" title="' + s.tracks.items[t].id + '" data="' + s.tracks.items[t].id.substring(1, 5) + '" name="https://api.spotify.com/v1/users/' + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks?&uris=spotify%3Atrack%3A" + s.tracks.items[t].id + '"   class="songLinkClick1 next played song-' + t + '" id="songLinkClick111' + t + '"> <div class="info"> <div class="img first"></div> <div class="titles"> <h5 title="' + s.tracks.items[t].id + '"  class="block">' + s.tracks.items[t].name + '</h5><p class="block"><span class="artistName">' + s.tracks.items[t].artists[0].name + '</span> <span class="albumName"> &#183; ' + s.tracks.items[t].album.name + '</span></p> </div> <div class="buttons"> <div onclick="vote(\'' + s.tracks.items[t].id + '\', 0)" class="voteBtn voteDown"></div><div class="voteUp voteBtn" name="0"></div><sup></sup></div></div></div>') : -1 == localStorage.CT.indexOf(s.tracks.items[t].id.substring(1, 5)) && $("#searchResults").append('<div onclick="newSong( ' + t + ' )" title="' + s.tracks.items[t].id + '" data="' + s.tracks.items[t].id.substring(1, 5) + '" name="https://api.spotify.com/v1/users/' + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks?&uris=spotify%3Atrack%3A" + s.tracks.items[t].id + '"   class="songLinkClick1 next played song-' + t + '" id="songLinkClick111' + t + '"> <div class="info"> <div class="img first"></div> <div class="titles"> <h5 title="' + s.tracks.items[t].id + '"  class="block">' + s.tracks.items[t].name + '</h5><p class="block"><span class="artistName">' + s.tracks.items[t].artists[0].name + '</span> <span class="albumName"> &#183; ' + s.tracks.items[t].album.name + '</span></p> </div> <div class="buttons"> <div onclick="vote(\'' + s.tracks.items[t].id + '\', 0)" class="voteBtn voteDown"></div><div class="voteUp voteBtn" name="0"></div><sup></sup></div></div></div>');
                        $("#all").fadeIn(1e3) } });
        }
        catch (t) {}
    }),window.newSong = function(t) {
           var e = "++" + $("#songLinkClick111" + t).attr("data");
           if(localStorage.CT.indexOf($("#songLinkClick111" + t).attr("data")) == -1){
           var current = parseInt($("#songLinkClick111" + t).find("sup").text());
                             if ($("#songLinkClick111" + t).find("sup").text().length<1) current = 0;
               $("#songLinkClick111" + t).find("sup").text(current + 1);
           socket.emit("newSongAdded", {
                       username: localStorage.userID
                       }), vote(e), -1 == localStorage.CT.indexOf($("#songLinkClick111" + t).attr("data")) && $.ajax({
                                                                                                                     type: "POST",
                                                                                                                     url: $("#songLinkClick111" + t).attr("name") + "&position=0",
                                                                                                                     headers: {
                                                                                                                     Authorization: "Bearer " + localStorage.current_token
                                                                                                                     },
                                                                                                                     dataType: "json",
                                                                                                                     data: "formdata",
                                                                                                                     success: function(t) {
                                                                                                                     nextSongs(), votedImg()
                                                                                                                     },
                                                                                                                     error: function(t) {
                                                                                                                     nextSongs(), votedImg()
                                                                                                                     }
                                                                                                                     })
              } else {
              vote(e);
              var current = parseInt($("#songLinkClick111" + t).find("sup").text());
                  if (typeof(current) != "number") current = 0;
              }
              }, window.playerToken = function() {
        $.ajax({
            type: "GET",
            url: '/refresh_token',
            data: {
                'refresh_token': localStorage.refresh_token
            },
            timeout: 12000,
            success: function(data) {
                localStorage.current_token = data.access_token;
                //setTimeout(function() { location.reload(); }, 1000);
            }
        });
    },
    window.checkToken = function() {
    $.ajax({
        async: !0,
        type: "GET",
        url: "https://api.spotify.com/v1/me",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: "formdata",
        success: function(e) {},
        error: function(err) {
            if (err.status.toString() === "401") {
                setTimeout(playerToken, 1500);
            }
        }
    })
    }, checkToken(), localStorage.explicit && localStorage.Snapster && localStorage.current_token && localStorage.party && localStorage.lastFM && localStorage.userID && localStorage.explicit && localStorage.password) {
    var party, userPrompt;
    localStorage.urlParts = window.location.toString().split("/public/")[0] + "/public";
    var obj2 = {};
    window.newToken = function() {
        $.ajax({
            type: "GET",
            url: "/refresh_token",
            data: {
                refresh_token: localStorage.refresh_token
            },
            timeout: 12e3
        }).done(function(t) {
            access_token = t.access_token, localStorage.current_token = t.access_token, setTimeout(function() {
                create()
            }, 5e3)
        })
    }, window.create = function() {
        localStorage.valid = "true", localStorage.userID || $.ajax({
            async: !0,
            type: "GET",
            url: "https://api.spotify.com/v1/me",
            headers: {
                Authorization: "Bearer " + localStorage.current_token
            },
            dataType: "json",
            data: "formdata",
            success: function(t) {
                localStorage.userID = t.id, userID = localStorage.userID, localStorage.valid = "true"
            },
            error: function() {}
        }), 3 < localStorage.party.length && 3 < localStorage.password.length && (obj2.party = localStorage.party.split(":::")[0], obj2.playlist = localStorage.Snapster + ":::" + localStorage.Snapster2, obj2.access_token = localStorage.current_token, obj2.username = localStorage.userID, obj2.explicit = localStorage.explicit, obj2.superpowers = localStorage.password, obj2.refresh_token = localStorage.refresh_token, $.ajax({
            dataType: "json",
            data: obj2,
            url: "https://paywallios.herokuapp.com/create",
            timeout: 12e3,
            success: function(t) {},
            error: function() {}
        }))
    }, window.kill = function() {
        3 < localStorage.party.length && 3 < localStorage.password.length && (obj2.party = localStorage.party.split(":::")[0] + "NEVERFIND", obj2.playlist = localStorage.Snapster + ":::" + localStorage.Snapster2, obj2.access_token = localStorage.current_token, obj2.username = localStorage.userID, obj2.explicit = localStorage.explicit, obj2.superpowers = localStorage.password, obj2.refresh_token = localStorage.refresh_token, $.ajax({
            dataType: "json",
            data: obj2,
            url: "https://paywallios.herokuapp.com/create",
            timeout: 12e3,
            success: function(t) {},
            error: function() {}
        }))
    }, setTimeout(function() {
        create()
    }, 15e3)
}
localStorage.superHost = !0, localStorage.willywonka = !0, localStorage.allowed = !0, localStorage.host = !0, localStorage.guest = !0, localStorage.valid = !0, localStorage.urlParts = window.location.toString().split("/public/")[0] + "/public", localStorage.urlGuest = window.location.toString().split("/public/")[0] + "/guest";
var newList, object = {},
    elem = document.getElementById("html");
window.closeWin = function() {
    $.ajax({
        type: "GET",
        url: "/close",
        success: function(t) {}
    })
}, window.hosting = function() {
    1 == parseInt(localStorage.hosting) ? (localStorage.hosting = 0, $("#hosting-toggle").text("ON"), $("#hosting-toggle").css("color", "green"), setTimeout(create, 1500)) : 0 == parseInt(localStorage.hosting) && (localStorage.hosting = 1, $("#hosting-toggle").text("OFF"), $("#hosting-toggle").css("color", "red"), setTimeout(create, 1500))
}, window.checkHost = function() {
    localStorage.hosting || (localStorage.hosting = 0, $("#hosting-toggle").text("ON"), $("#hosting-toggle").css("color", "green"), setTimeout(create, 5e3)), 0 == parseInt(localStorage.hosting) && $("#hosting-toggle").text("") ? ($("#hosting-toggle").text("ON"), $("#hosting-toggle").css("color", "green")) : 1 == parseInt(localStorage.hosting) && $("#hosting-toggle").text("") && ($("#hosting-toggle").text("OFF"), $("#hosting-toggle").css("color", "red"))
}, checkHost(), window.saveList = function() {
    $.ajax({
        async: !0,
        type: "PUT",
        url: "https://api.spotify.com/v1/playlists/" + localStorage.Snapster,
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: JSON.stringify({
            name: "Swagger Jukebox - Saved"
        }),
        success: function(t) {}
    }), setTimeout(tognav, 500)
};
var p2 = "https://play.spotify.com/track/";
localStorage.setItem("guest", !0), localStorage.setItem("temp", !0), localStorage.setItem("allowed", !0), window.start = function() {
    $.ajax({
        async: !0,
        type: "GET",
        url: "https://api.spotify.com/v1/me",
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: "formdata",
        success: function(t) {
            localStorage.userID = t.id, userID = localStorage.userID, localStorage.valid = "true"
        }
    })
}, setTimeout(function() {
    !localStorage.userID || localStorage.Snapster || localStorage.party || (location.href = localStorage.urlParts + "/welcome.html")
}, 1e3), window.guest = function() {
    localStorage.removeItem("host"), location.href = "partymusic://pause", setTimeout(function() {
        return location.href = localStorage.urlGuest + "/app.html", !1
    }, 250)
}, window.playlists = function() {
    location.href = localStorage.urlParts + "/playlists.html"
}, window.relo = function() {
    return location.href = localStorage.urlParts + "/index.html", !1
}, window.removeAds = function() {
    location.href = localStorage.urlParts + "/appHosting.html"
}, window.saveList = function() {
    $.ajax({
        async: !0,
        type: "PUT",
        url: "https://api.spotify.com/v1/playlists/" + localStorage.Snapster,
        headers: {
            Authorization: "Bearer " + localStorage.current_token
        },
        dataType: "json",
        data: JSON.stringify({
            name: "Swagger Jukebox - Saved"
        }),
        success: function(t) {}
    }), setTimeout(tognav, 500)
}, window.purgify = function() {
    var answer = "";
    removeHTML();
    var reg = /^\d+$/;
    answer = prompt("Songs with -X or fewer votes will be removed from the list...");
    if (reg.test(answer) === true) {
        if ((answer * 1) > 1) {
            remove(answer * -1);
            tognav();
        } else {
            alert("The number you enter must be greater than 1.")
        }
    } else {
        alert("Please enter a valid number.  Allowed characters: '0123456789'")
    }
},
window.removeHTML = function() {
    if (document.hasFocus()) {
        history.replaceState("/index.html", document.title, "Swagger Music");
    }
}, window.reloadify = function() {
    return $("#load").hide(), !1
}, window.terminate = function() {
    location.href = "partymusic://terminate";
    var urlParts = localStorage.urlParts;
    localStorage.clear();
}, window.softTerminate = function() {
    Cookies.remove('locStore');
    Cookies.remove('justClicked');
    var urlParts = localStorage.urlParts;
    setTimeout(function() { location.href = "partymusic://softterminate"; }, 250);
    localStorage.clear();
}, window.settings = function() {
    location.href = localStorage.urlParts + "/welcome.html"
}, window.terms = function() {
    $("#dialogPage").hide(), location.href = "partymusic://terms"
}, window.privacy = function() {
    $("#dialogPage").hide(), location.href = "partymusic://privacy"
}, Cookies.get("karma") || Cookies.set("karma", "25", {
    expires: 30
}),Cookies.set("locStore", JSON.stringify(localStorage), {
expires: 100
}),
Cookies.set("locStore2", JSON.stringify(localStorage), {
            expires: 100
            }), setTimeout(function() {
    localStorage.wasPressed = 1, localStorage.i || (localStorage.i = 1)
}, 4e3), setTimeout(function() {
    Cookies.get("partyInfo") || (Cookies.set("partyInfo", "true", {
        expires: 30
    }))
}, 1e3), window.startPlaying = function(t) {
    localStorage.Snapster = t, localStorage.removeItem("songList"), setTimeout(function() {
        location.href = localStorage.urlParts + "/index.html"
    }, 200)
}, window.tognav = function() {
    $("#mySidenav").toggle(function() {
        $("#mySidenav").css("width", "80%")
    })
}, window.openLink = function(t, e) {
    var a, o, s;
    for (o = document.getElementsByClassName("tabcontent"), a = 0; a < o.length; a++) o[a].style.display = "none";
    for (s = document.getElementsByClassName("tablinks"), a = 0; a < s.length; a++) s[a].className = s[a].className.replace(" active", "");
    "nav1" != e ? $("#mySidenav").css("width", "") : $("#mySidenav").css("width", "85%"), document.getElementById(e).style.display = "block", t.currentTarget.className += " active"
}, window.changeLink = function(t, e) {
    var a, o;
    for (document.getElementsByClassName("tabcontent"), o = document.getElementsByClassName("tablinks"), a = 0; a < o.length; a++) o[a].className = o[a].className.replace(" active", "");
    t.currentTarget.className += " active"
}, setTimeout(function() {
    document.getElementById("defaultTab").click()
}, 250);
window.cashOut = function() {
               if(parseInt(localStorage.earnings) >= 18) {
               history.replaceState("file://", document.title, "Swagger Music");
               var c = prompt("Enter Your Venmo Username");
               if(c) {
               var obj = {};
               obj.user = localStorage.userID;
               obj.earnings = localStorage.earnings;
               obj.venmo = c;
               $.ajax({
                      url: "https://paywallios.herokuapp.com/cashOut",
                      data: obj,
                      timeout:10000,
                      dataType: "json",
                      success: function (d) {
                      }, error: function (e, ee, eee) {
                      }
                      });
               setTimeout(function() {
                 location.href = localStorage.urlParts + "/index.html";
               }, 500);
               }
               } else {
               history.replaceState("file://", document.title, "Swagger Music");
               var c = confirm("$18 minimum is required to cash out...");
               if(c || !c) {
               location.href = localStorage.urlParts + "/index.html";
               }
               }
               }
               window.getTally = function() {
               var obj = {};
               obj.party = localStorage.party.split(":::")[0];
               $.ajax({
                      url: "https://paywallios.herokuapp.com/find",
                      data: obj,
                      timeout:10000,
                      dataType: "json",
                      success: function (d) {
                      localStorage.earnings = (parseInt(d.users) * 3);
                      $("#earnings").text("$" + localStorage.earnings + ".00")
                      }, error: function (e, ee, eee) {
                      }
                      });
               }
               setTimeout(getTally, 2000);
               $("#showMenu").on("tap", function(e) {
                                                tognav();
                                                e.preventDefault();
                                                changeLink(event, 'nav1');
                                                });
                              $("#showPlaylists").on("tap", function() {
                                                     openLink(event, 'Home');
                                                     $('#searchResults').empty();
                                                     });
                              $("#showSearch").on("tap", function() {
                                  $('#playlistItemsListed').empty();
                                                  openLink(event, 'Search');
                                                  resetPlaylists();
                                                  });
                              $("#defaultTab").on("tap", function() {
                                                  openLink(event, 'NowPlaying');
                                                  //nS();
                                                  });
window.resetPlaylists = function() {
$('#playlistItemsListed').hide();
$('#playlistsListed').show();
}
window.viewPlaylist = function(playlist, user) {
    loading();
    $("#playlistsListed").hide();
    $("#playlistItemsListed").show();
    window.scrollTo(0, 0);
    $("#playlistItemsListed").empty();
 if (user != "spotify") user = localStorage.userID;
 $.ajax({
   async: 0,
   type: "GET",
   url: "https://api.spotify.com/v1/users/" + user + "/playlists/" + playlist + "/tracks",
   headers: {
     Authorization: "Bearer " + localStorage.current_token
   },
   dataType: "json",
   data: "formdata",
   success: function(s) {
        $("#playlistItemsListed").append('<p onclick="resetPlaylists();" id="backArrow"><i class="fa fa-arrow-left" aria-hidden="true"></i></p><p id="usePlaylist" onclick="clone(\'' + playlist + '\', \'' + user + '\');" class="items">Use This Playlist</p>');
     for (var t = 0; t < s.items.length; t++) {
       //if(-1 == localStorage.CT.indexOf(s.items[t].track.id.substring(1, 5))) {
       $("#playlistItemsListed").append('<div onclick="newSong( ' + t + ' )" title="' + s.items[t].track.id + '" data="' + s.items[t].track.id.substring(1, 5) + '" name="https://api.spotify.com/v1/users/' + localStorage.userID + "/playlists/" + localStorage.Snapster + "/tracks?&uris=spotify%3Atrack%3A" + s.items[t].track.id + '"   class="songLinkClick1 next played song-' + t + '" id="songLinkClick111' + t + '"> <div class="info"> <div class="img first"></div> <div class="titles"> <h5 title="' + s.items[t].track.id + '"  class="block">' + s.items[t].track.name + '</h5><p class="block"><span class="artistName">' + s.items[t].track.artists[0].name + '</span> <span class="albumName"> &#183; ' + s.items[t].track.album.name + '</span></p> </div> <div class="buttons"> <div class="voteBtn voteDown"></div><div class="voteUp voteBtn" name="0"></div><sup></sup></div></div></div>');
       //}
     }
     calculateVotes();
   }
 });
    setInterval(checkToken, 90000);
};
